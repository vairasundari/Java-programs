/*
Greater on right side

You are given an array A of size N. Replace every element with the next greatest element (greatest element on its right side) in the array. Also, if there is no 

element next to the last element, replace it with -1.

Note : Save the file / class as “greatOnRight” with appropriate file extension.

Input:
The first line of input contains an integer T denoting the number of test cases. T testcases follow. Each test-case contains two lines of input. The first line is N, 

the size of tha array. The second line contains N space separated integers.

Output:
For each test-case, print the modified array.

Constraints:
1 <= T <= 50
1 <= N <= 100
1 <= Ai <= 1000

Example:
Input:
2
6
16 17 4 3 5 2
4
2 3 1 9

Output:
17 5 5 5 2 -1
9 9 9 -1

Explanation:
Testcase1: For 16 the greatest element on its right is 17. For 17 it's 5. For 4 it's 5. For 3 it's 5. For 5 it's 2. For 2 it's -1(no element to its right). So the answer is 

17 5 5 5 2 -1
*/


//PROGRAMS:
import java.util.*;
public class GreatOnRight{
   public static void main(String[] args){
	int test_case,i;
	Scanner scan=new Scanner(System.in);
	System.out.println("Enter the  number of test cases:");
	test_case=scan.nextInt();
	for(i=0;i<test_case;i++)
	{
		int no_of_elements,j,max,k;
		System.out.println("Enter the no.of elements:");
		no_of_elements=scan.nextInt();
		int arr[]=new int[no_of_elements];
		System.out.println("Enter the elements:");
		for(j=0;j<no_of_elements;j++)
			arr[j]=scan.nextInt();
		for(j=0;j<no_of_elements-1;j++){
			max=-1;
			for(k=j+1;k<no_of_elements;k++){
				if(arr[k]>max)
				max=arr[k];
					}
			System.out.print(max+ " ");
					}
		System.out.print("-1");System.out.println();
	}
}}
